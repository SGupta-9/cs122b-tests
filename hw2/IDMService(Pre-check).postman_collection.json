{
	"info": {
		"_postman_id": "f2109335-d996-4946-a2ef-5083ea492924",
		"name": "IDMService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "/api/idm/register - Valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(110);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"User registered successfully\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email1}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - Email already in use (Case 16)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(16);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email already in use\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - tooShortPwd (Case 12)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(12);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password does not meet length requirements\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email2}},\n    \"password\": {{tooShortPassword}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - invalidFormatEmail (Case -11)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-11);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{invalidFormatEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - json parse exception (Case -3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0a5722-26a6-4d95-bffd-877fc388755f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).not.eql(null);",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.resultCode).eql(-3);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Parse Exception\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1bc9792-8ed0-4454-a55a-8012f54f3475",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{invalidJson}}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - null password (Case -12)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-12);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password has invalid length (cannot be empty/null)\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email3}},\n    \"password\": null\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - empty password (Case -12)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-12);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password has invalid length (cannot be empty/null)\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email4}},\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - too long email (Case -10)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-10);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{tooLongEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - Password dos not meet character requirements (Case 13)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(13);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password does not meet character requirements\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email5}},\n    \"password\": {{invalidCharReqPassword}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/register - json mapping exception (Case -2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-2);",
									"    pm.expect(jsonData).not.eql(null);",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email6}},\n    \"password\": {{password}},\n    \"extraValues\": {{extraValue}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Privilege",
			"item": [
				{
					"name": "/api/idm/privilege - valid (Case 140)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adc7d178-8fb6-4688-ae79-c492f0159afc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(140);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"User has sufficient privilege level\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"plevel\": {{plevel}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - insufficient privilege (Case 141)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adc7d178-8fb6-4688-ae79-c492f0159afc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(141);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"User has insufficient privilege level\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"plevel\": {{insufficientPlevel}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - out of range (Case -14)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adc7d178-8fb6-4688-ae79-c492f0159afc",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-14);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Privilege level out of valid range\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"plevel\": {{outOfRangePlevel}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - invalidFormatEmail (Case -11)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-11);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{invalidFormatEmail}},\n    \"plevel\": {{plevel}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - too long email (Case -10)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-10);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{tooLongEmail}},\n    \"plevel\": {{plevel}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - json parse exception (Case -3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba0a5722-26a6-4d95-bffd-877fc388755f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).not.eql(null);",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.resultCode).eql(-3);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Parse Exception\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1bc9792-8ed0-4454-a55a-8012f54f3475",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{invalidJson}}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/privilege - json mapping exception (Case -2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-2);",
									"    pm.expect(jsonData).not.eql(null);",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"plevel\": {{plevel}},\n    \"extraValues\": {{extraValue}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/privilege",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"privilege"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "/api/idm/login - login successfully (Case 120)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains a success message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(120);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"User logged in successfully\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email1}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - invalidPasswordLength (Case -12)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-12);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password has invalid length\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"password\": {{tooLongPassword}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - invalidEmailAddrFormat (Case -11)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-11);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid format\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{invalidFormatEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - invalidEmailAddrLength (Case -10)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-10);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Email address has invalid length\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{tooLongEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - JSONParseException (Case -3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-3);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Parse Exception\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{invalidJson}}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - JSONMappingException (Case -2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(-2);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"JSON Mapping Exception\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{existingEmail}},\n    \"password\": {{password}},\n    \"extraValues\": {{extraValue}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - passwordDoNotMatch (Case 11)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(11);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"Password mismatch\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{email1}},\n    \"password\": {{mismatchedPassword}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/idm/login - userNotFound (Case 14)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0063f773-c18b-4b75-b185-2c567f0b1cc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad5a786-e956-4eba-b4f9-5c1cb7be4c2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has a body in json format\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Response matches the required schema', function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"returnSchema\")),false, true)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains an error message\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.resultCode).eql(14);",
									"",
									"    pm.expect(jsonData.message).not.eql(null);",
									"    pm.expect(jsonData.message).to.contain(\"User not found\");",
									"    ",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": {{nonExistingEmail}},\n    \"password\": {{password}}\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/api/idm/register",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"idm",
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}